{"version":3,"sources":["components/SortablePostList/Post.js","components/SortablePostList/PostList.js","components/SortablePostList/Action.js","components/SortablePostList/ActionList.js","components/SortablePostList/helpers.js","components/SortablePostList/index.js","App.js","serviceWorker.js","index.js"],"names":["Post","props","index","changeOrder","post","className","id","title","onClick","PostList","posts","TransitionGroup","map","key","CSSTransition","timeout","classNames","Action","action","timeTravel","postId","fromIndex","toIndex","ActionList","actions","actionsCommited","sort","a","b","swapPost","indexMovedTo","_posts","temp","e","console","log","SortablePostList","useState","setPosts","setActions","useEffect","axios","get","firstFivePosts","data","slice","error","_actions","push","addAction","length","_actionsToRollback","filter","ac","forEach","timeTraveler","App","Boolean","window","location","hostname","match","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.810f8bcb.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Post = (props) => {\r\n    const { index, changeOrder, post } = props;\r\n    return (\r\n        <div className=\"Post\">\r\n            <div className=\"w-full shadow-md bg-white mb-5 rounded-md flex items-center justify-between\">\r\n                <div className=\"flex-1 pl-2\">\r\n                    <p className=\"p-6\">POST {post.id} <br /> {post.title}</p>\r\n                </div>\r\n                <div className=\"flex flex-col justify-items-auto pr-6 gap-y-4\">\r\n                    {index !== 0 && <i onClick={() => changeOrder(index, index - 1)} className=\"cursor-pointer fa fa-angle-up text-lg text-purple-800 transform duration-500 ease-in-out hover:scale-150 hover:bold\" ></i>}\r\n                    {index !== 4 && <i onClick={() => changeOrder(index, index + 1)} className=\"cursor-pointer fa fa-angle-down text-lg text-purple-800 transform duration-500 ease-in-out hover:scale-150\" ></i>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nPost.propTypes = {\r\n    post: PropTypes.shape({\r\n        \"userId\": PropTypes.number,\r\n        \"id\": PropTypes.number.isRequired,\r\n        \"title\": PropTypes.string,\r\n        \"body\": PropTypes.string,\r\n        \"index\": PropTypes.number\r\n    }),\r\n    changeOrder: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Post;","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Post from './Post'\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\n\r\nconst PostList = (props) => {\r\n    const { posts, changeOrder } = props;\r\n    return (\r\n        <div className=\"PostList\">\r\n            <h2 className=\"text-white text-xl font-semibold mb-6\">Sortable Post List</h2>\r\n            <TransitionGroup className=\"ActionList\">\r\n                {\r\n                    posts.map((post, key) => {\r\n                        const index = key;\r\n                        return (\r\n                            <CSSTransition\r\n                                key={index}\r\n                                timeout={1000}\r\n                                classNames=\"item\">\r\n                                <Post\r\n                                    key={post.id}\r\n                                    post={post}\r\n                                    index={index}\r\n                                    changeOrder={changeOrder}\r\n                                />\r\n                            </CSSTransition>\r\n                        )\r\n                    })\r\n                }\r\n            </TransitionGroup>\r\n        </div>\r\n    )\r\n}\r\n\r\nPostList.propTypes = {\r\n    posts: PropTypes.array.isRequired,\r\n    changeOrder: PropTypes.func.isRequired\r\n}\r\n\r\nexport default PostList;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Action = (props) => {\r\n    const { action, timeTravel } = props;\r\n    return (\r\n        <div className=\"w-full rounded-md bg-white border-b bor border-solid border-gray-300 flex items-center justify-between p-2\">\r\n            <p className=\"text-sm\">Moved post {action.postId} from index {action.fromIndex} to index {action.toIndex}</p>\r\n            <button className=\"bg-green-400 hover:bg-green-500 py-2 px-4 rounded focus:outline-none\" onClick={() => timeTravel(action.id)}>\r\n                Time travel\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nAction.propTypes = {\r\n    action: PropTypes.shape({\r\n        postId: PropTypes.number.isRequired,\r\n        fromIndex: PropTypes.number.isRequired,\r\n        id: PropTypes.number.isRequired\r\n    }),\r\n    timeTravel: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Action;","import React from 'react'\r\nimport Action from './Action'\r\nimport PropTypes from 'prop-types'\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\n\r\nconst ActionList = (props) => {\r\n    const { actions, timeTravel } = props;\r\n    const actionsCommited = actions.sort((a, b) => b.id - a.id).map((action, key) => {\r\n        const index = key;\r\n        return (\r\n            <CSSTransition\r\n                key={index}\r\n                timeout={1000}\r\n                classNames=\"item\"\r\n            >\r\n                <Action\r\n                    key={index}\r\n                    action={action}\r\n                    index={index}\r\n                    timeTravel={timeTravel}\r\n                />\r\n            </CSSTransition>\r\n        )\r\n    })\r\n    return (\r\n        <div>\r\n            <TransitionGroup className=\"ActionList\">\r\n                {actionsCommited}\r\n            </TransitionGroup>\r\n        </div>\r\n    );\r\n}\r\n\r\nActionList.propTypes = {\r\n    actions: PropTypes.array.isRequired,\r\n    timeTravel: PropTypes.func.isRequired\r\n}\r\n\r\nexport default ActionList;","/**\r\n * post will be change in to new possition based on given indexes\r\n * @param {integer} index \r\n * @param {integer} indexMovedTo \r\n * @param {array} _posts \r\n */\r\nconst swapPost = (index, indexMovedTo, _posts) => {\r\n    try {\r\n        const temp = _posts[index]\r\n        _posts[index] = _posts[indexMovedTo]\r\n        _posts[indexMovedTo] = temp\r\n        return _posts;\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\n/**\r\n * post list will be reverted accoding to the given actions order, expect reversed action list\r\n * @param {array} _actionsToRollback \r\n * @param {array} _posts \r\n */\r\nconst timeTraveler = (_actionsToRollback, _posts) => {\r\n    try {\r\n        _actionsToRollback.forEach(ac => {\r\n            _posts = swapPost(ac.toIndex, ac.fromIndex, _posts);\r\n        })\r\n        return _posts;\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\n/**\r\n * New action will be added to the action list\r\n * @param {array} _actions \r\n * @param {Object} action \r\n */\r\nconst addAction = (_actions, action) => {\r\n    try {\r\n        _actions.push(action)\r\n        return _actions;\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport {\r\n    swapPost,\r\n    timeTraveler,\r\n    addAction\r\n}","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport PostList from './PostList'\r\nimport ActionList from './ActionList'\r\nimport { swapPost, timeTraveler, addAction } from './helpers'\r\nimport './styles.scss'\r\n\r\nconst SortablePostList = () => {\r\n    const [posts, setPosts] = useState([])\r\n    const [actions, setActions] = useState([])\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                const _posts = await axios.get(\"https://jsonplaceholder.typicode.com/posts\");\r\n                const firstFivePosts = _posts.data.slice(0, 5);\r\n                setPosts(firstFivePosts);\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        })();\r\n    }, []);\r\n\r\n    const handleTimeTravelChangeEvent = (id) => {\r\n        try {\r\n            let _posts = [...posts];\r\n            let _actionsToRollback = [...actions].filter(ac => ac.id >= id);\r\n            let _actions = [...actions].filter(ac => ac.id < id);\r\n\r\n            _posts = timeTraveler(_actionsToRollback, _posts);\r\n            setPosts(_posts);\r\n            setActions(_actions);\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n\r\n    const handlePostListChangeEvent = (index, indexMovedTo) => {\r\n        try {\r\n            let _posts = [...posts];\r\n            const postId = posts[index].id;\r\n            _posts = swapPost(index, indexMovedTo, _posts);\r\n            setPosts(_posts);\r\n\r\n            let _actions = [...actions];\r\n            const action = {\r\n                id: _actions.length,\r\n                postId,\r\n                fromIndex: index,\r\n                toIndex: indexMovedTo\r\n            }\r\n            _actions = addAction(_actions, action);\r\n            setActions(_actions);\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"flex container w-full flex-wrap px-20 py-10 overflow-hidden bg-gray-50 SortablePostList\">\r\n            <div className=\"my-3 px-3 overflow-hidden sm:w-full md:w-full lg:w-1/2 xl:w-1/2 z-10\">\r\n                <PostList\r\n                    posts={posts}\r\n                    changeOrder={handlePostListChangeEvent}\r\n                />\r\n            </div>\r\n            <div className=\"my-3 px-3 overflow-hidden sm:w-full md:w-full lg:w-1/2 xl:w-1/2 z-10\">\r\n                <div className=\"w-full rounded-md shadow-md bg-white\">\r\n                    <p className=\"text-cool-gray-900 text-xl font-semibold p-5 heading\">List of actions commited</p>\r\n                    <div className=\"w-full rounded-md rounded-t-none bg-gray-100 p-4 flex flex-col-reverse\">\r\n                        <ActionList\r\n                            actions={actions}\r\n                            timeTravel={handleTimeTravelChangeEvent}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default SortablePostList;","import React from 'react';\nimport SortablePostList from './components/SortablePostList'\n\nconst App = () => {\n  return (\n    <div className=\"min-h-screen w-full custom-background bg-gray-50\">\n      <SortablePostList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/tailwind.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/index.scss'\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}